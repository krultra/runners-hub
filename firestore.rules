rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // =============================================
    // Helper functions
    // =============================================
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isRunAlertUser() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // =============================================
    // Users Collection (Shared)
    // =============================================
    match /users/{userId} {
      // Public read access for basic info (name, personId) for runner search/profiles
      // Full read access for the user themselves or admins
      allow read: if true;  // Allow public read for runner search and profiles

      // Allow users to create or update their own document
      // Admins can manage any user document
      allow create: if request.auth != null && (
        (
          request.auth.uid == userId &&
          (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false)
        ) ||
        isAdmin()
      );

      allow update: if request.auth != null && (
        (
          request.auth.uid == userId &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'displayName',
            'photoURL',
            'ra',
            'lastLogin',
            'firstName',
            'lastName',
            'phoneCountryCode',
            'phone',
            'email'
          ]) &&
          request.resource.data.isAdmin == resource.data.isAdmin
        ) ||
        (
          !exists(/databases/$(database)/documents/users/$(userId)) &&
          request.auth.uid == userId &&
          (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == false)
        ) ||
        (
          isAdmin() &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'displayName',
            'photoURL',
            'ra',
            'lastLogin',
            'firstName',
            'lastName',
            'phoneCountryCode',
            'phone',
            'email',
            'personId',
            'isAdmin'
          ])
        )
      );
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }

    
    // =============================================
    // RunnersHub Collections
    // =============================================
    match /registrations/{registrationId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && (
        // Owner can write their own registration
        request.auth.uid == request.resource.data.userId ||
        // Admins can manage registrations
        isAdmin()
      );
    }

    match /mail/{emailId} {
      allow create: if request.auth != null;
      allow read, delete: if true;
    }

    match /counters/{counterId} {
      allow read, write: if true;
    }

    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    match /invitations/{invitationId} {
      allow read, write: if isAdmin();
    }

    match /emailLogs/{logId} {
      allow read, write: if isAdmin();
    }

    match /emailTemplates/{templateId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Bulk Email Campaigns
    match /campaigns/{campaignId} {
      allow read, write: if isAdmin();
    }

    match /registrationStatuses/{statusId} {
      allow read, write: if isAdmin();
    }

    match /actionRequests/{reqId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /adminTasks/{taskId} {
      allow read, write: if isAdmin();
    }

    match /functionSchedules/{docId} {
      allow read, write: if isAdmin();
    }

    match /currentSchedules/{docId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    match /moRegistrations/{participantId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /moTiming/{timingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /timeGradingFactors/{factorId} {
      allow read: if true;
      allow write: if true;
    }

    match /eventEditions/{editionId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /codeLists/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // =============================================
    // KUTC Results (public read, admin write)
    // =============================================
    match /kutcResults/{editionId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /kutcResults/{editionId}/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // =============================================
    // Events (public read, admin write)
    // =============================================
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // =============================================
    // Checkpoint Results (public read, admin write)
    // =============================================
    match /checkpointResults/{documentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // =============================================
    // Default deny all other access
    // =============================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}