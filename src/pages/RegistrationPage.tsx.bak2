import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useNavigate, Link as RouterLink } from 'react-router-dom';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { getRegistrationsByEdition } from '../services/registrationService';
import { testFirestoreConnection } from '../services/testFirestore';
import {
  Container,
  Typography,
  Box,
  Paper,
  Button,
  Grid,
  Alert,
  CircularProgress
} from '@mui/material';
import { initialFormData, validateForm } from '../utils/validation';
import { useEventEdition, CurrentEvent } from '../contexts/EventEditionContext';
import PersonalInfoForm from '../components/registration/PersonalInfoForm';
import RaceDetailsForm from '../components/registration/RaceDetailsForm';
import ReviewRegistration from '../components/registration/ReviewRegistration';
import RegistrationStepper from '../components/registration/RegistrationStepper';
import RegistrationSnackbar from '../components/registration/RegistrationSnackbar';

const steps = ['Personal Information', 'Race Details', 'Review & Submit'];

// Inner component containing all hooks and logic, now receiving event as prop
const RegistrationPageInner: React.FC<{ event: CurrentEvent }> = ({ event }) => {
  const navigate = useNavigate();
  // Firebase Auth state
  const [user, setUser] = useState<any>(null);
  const [authChecked, setAuthChecked] = useState(false);

  // Prefill/edit registration state
  const [isEditingExisting, setIsEditingExisting] = useState(false);
  const [existingRegistrationId, setExistingRegistrationId] = useState<string | null>(null);

  // Form state
  const [activeStep, setActiveStep] = useState(0);
  const [formData, setFormData] = useState(initialFormData);
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [touchedFields, setTouchedFields] = useState<{ [key: string]: boolean }>({});
  const [validationAttempted, setValidationAttempted] = useState(false);
  const [isFull, setIsFull] = useState(false);
  const [waitingListConsent, setWaitingListConsent] = useState(false);

  // Snackbar state
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'error' | 'info' | 'warning'>('info');
  const [snackbarOpen, setSnackbarOpen] = useState(false);

  // Field refs for input elements
  const fieldRefs = useRef<{
    isOnWaitinglist: HTMLInputElement | null;
    waitinglistExpires: HTMLInputElement | null;
    termsAccepted: HTMLInputElement | null;
  }>({ isOnWaitinglist: null, waitinglistExpires: null, termsAccepted: null });

  // Div refs for container elements
  const divRefs = useRef<Record<string, React.RefObject<HTMLDivElement | null>>>({});

  // Handlers
  const handleFormChange = useCallback((field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setTouchedFields(prev => ({ ...prev, [field]: true }));
  }, []);

  const handleFieldTouch = useCallback((field: string) => {
    setTouchedFields(prev => ({ ...prev, [field]: true }));
  }, []);

  const clearAllErrors = useCallback(() => {
    setErrors({});
  }, []);

  const showCurrentStepErrors = useCallback(() => {
    const currentErrors = validateForm(formData, activeStep);
    setErrors(currentErrors);
    return Object.keys(currentErrors).length > 0;
  }, [formData, activeStep]);

  const hasPersonalInfoErrors = useCallback(() => {
    const errors = validateForm(formData, 0);
    return Object.keys(errors).length > 0;
  }, [formData]);

  const hasRaceDetailsErrors = useCallback(() => {
    const errors = validateForm(formData, 1);
    return Object.keys(errors).length > 0;
  }, [formData]);

  // Check if event is full
  useEffect(() => {
    if (!event) return;
    const loadCount = async () => {
      try {
        const regs = await getRegistrationsByEdition(event.id);
        const openRegs = regs.filter(r => !r.isOnWaitinglist && (r.status === 'pending' || r.status === 'confirmed'));
        const waitingRegs = regs.filter(r => r.isOnWaitinglist && (r.status === 'pending' || r.status === 'confirmed'));
        setIsFull(openRegs.length >= (event.maxParticipants ?? 0) || waitingRegs.length > 0);
      } catch (err) {
        console.error('Error checking registration count:', err);
      }
    };
    loadCount();
  }, [event]);

  // Handle waiting list expiration date when event is full
  useEffect(() => {
    if (!event) return;
    if (isFull && !isEditingExisting) {
      setFormData(prev => ({ 
        ...prev, 
        waitinglistExpires: prev.waitinglistExpires ?? event.startTime 
      }));
    }
  }, [isFull, event, event.startTime, isEditingExisting]);

  // Reset waiting list consent when event full status changes
  useEffect(() => {
    if (!isFull) {
      setWaitingListConsent(false);
      handleFormChange('waitinglistExpires', null);
    }
  }, [isFull, handleFormChange]);

  // Fetch and prefill existing registration
  useEffect(() => {
    const fetchAndPrefill = async () => {
      if (authChecked && user && user.uid) {
        try {
          // Dynamically import to avoid SSR issues
          const { getRegistrationsByUserId } = await import('../services/registrationService');
          const registrations = await getRegistrationsByUserId(user.uid);
          if (registrations && registrations.length > 0) {
            // Use the first registration (should only be one per user)
            const reg = registrations[0];
            setFormData({
              ...initialFormData,
              ...reg,
              email: user.email || reg.email || '',
              dateOfBirth: reg.dateOfBirth ? new Date(reg.dateOfBirth) : null,
              waitinglistExpires: reg.waitinglistExpires
                ? (reg.waitinglistExpires instanceof Date
                  ? reg.waitinglistExpires
                  : typeof (reg.waitinglistExpires as any).toDate === 'function'
                    ? (reg.waitinglistExpires as any).toDate()
                    : new Date(reg.waitinglistExpires))
                : null,
              termsAccepted: reg.termsAccepted || false
            });
            setIsEditingExisting(true);
            setExistingRegistrationId(reg.id ?? null);
          } else {
            setIsEditingExisting(false);
            setExistingRegistrationId(null);
            setFormData({ ...initialFormData, email: user.email || '' });
          }
        } catch (err: any) {
          if (err && err.code === 'unavailable') {
            setSnackbarMessage('Could not connect to the database. Please check your internet connection.');
            setSnackbarSeverity('error');
            setSnackbarOpen(true);
          } else {
            console.error('Error fetching existing registration:', err);
          }
        }
      }
    };
    fetchAndPrefill();
  }, [authChecked, user, setSnackbarMessage, setSnackbarSeverity, setSnackbarOpen]);

  useEffect(() => {
    const auth = getAuth();
    const unsub = onAuthStateChanged(auth, (u) => {
      setUser(u);
      setAuthChecked(true);
      if (u && u.email) {
        setFormData((prev: any) => ({ ...prev, email: u.email }));
      }
    });
    return unsub;
  }, []);

  useEffect(() => {
    if (authChecked && !user) {
      navigate('/auth?returnTo=/register', { replace: true });
    }
  }, [authChecked, user, navigate]);

  // Check if registration is still open
  const now = new Date();
  const isRegistrationOpen = event.registrationDeadline ? now < event.registrationDeadline : false;

  // Check if the form is valid for final submission (including terms)
  const isFormValidForSubmission = () => {
    const errors = validateForm(formData, touchedFields, true, true, undefined); // Silent validation
    // Block submission if not authenticated
    if (!user || !user.email) return false;
    // For waiting list, require consent checkbox
    if (isFull && !waitingListConsent) {
      errors['isOnWaitinglist'] = 'You must confirm your willingness to join the waiting list';
    }
    return Object.keys(errors).length === 0;
  };



  const handleNext = () => {
    // For final step (from Race Details to Review), check all fields except terms
    if (activeStep === steps.length - 2) {
      setValidationAttempted(true);
      // Validate all fields except terms and conditions
      const currentErrors = validateForm(formData, touchedFields, true, true, undefined); // Silent validation
      const errorsWithoutTerms = { ...currentErrors };
      delete errorsWithoutTerms.termsAccepted;
      // Only advance if no errors
      if (Object.keys(errorsWithoutTerms).length === 0) {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        window.scrollTo(0, 0);
        setTimeout(() => showCurrentStepErrors(), 100);
      } else {
        setErrors(errorsWithoutTerms);
        setSnackbarMessage('Please complete all required fields before submitting');
        setSnackbarOpen(true);
        // Do NOT advance step if there are errors
        // Optionally scroll to first error
        if (hasPersonalInfoErrors()) {
          setActiveStep(0); // Go to personal info step
          setTimeout(() => {
            const personalInfoFields = ['firstName', 'lastName', 'dateOfBirth', 'nationality', 'email', 'phoneCountryCode', 'phoneNumber'];
            const personalInfoErrors: Record<string, string> = {};
            personalInfoFields.forEach(field => {
              if (field in errorsWithoutTerms) {
                personalInfoErrors[field] = errorsWithoutTerms[field];
              }
            });
            setErrors(personalInfoErrors);
            scrollToFirstError(personalInfoErrors);
          }, 100);
        } else {
          scrollToFirstError(errorsWithoutTerms);
        }
      }
    } else {
      // For other steps, validate only relevant fields
      // Only advance if current step is valid
      let stepValid = true;
      if (activeStep === 0 && hasPersonalInfoErrors()) stepValid = false;
      if (activeStep === 1 && hasRaceDetailsErrors()) stepValid = false;

      if (stepValid) {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        window.scrollTo(0, 0);
        clearAllErrors();
      } else {
        setValidationAttempted(true);
        showCurrentStepErrors();
        setSnackbarMessage('Please complete all required fields before proceeding');
        setSnackbarOpen(true);
      }
    }
  };

  // Scroll to the first error field
  const scrollToFirstError = (currentErrors: Record<string, string>) => {
    const errorFields = Object.keys(currentErrors);
    if (errorFields.length > 0) {
      const firstErrorField = errorFields[0];
      
      // Try input refs first
      const inputRef = fieldRefs.current[firstErrorField as keyof typeof fieldRefs.current];
      if (inputRef) {
        inputRef.scrollIntoView({ behavior: 'smooth', block: 'center' });
        return;
      }

      // Try div refs if input ref not found
      const divRef = divRefs.current[firstErrorField];
      if (divRef?.current) {
        divRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
    // Scroll to top when moving to previous step
    window.scrollTo(0, 0);
    
    // When going back, keep validation attempted state but show errors for the previous step
    setTimeout(() => showCurrentStepErrors(), 100);
  };
  
  // Handle snackbar close
  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };



  // Handle waiting list consent change
  const handleWaitingListConsentChange = (checked: boolean) => {
    setWaitingListConsent(checked);
    // When unchecking, clear the waiting list expiration date
    if (!checked) {
      handleFormChange('waitinglistExpires', null);
    }
    // Validate the waiting list expiration field
    validateForm(formData, touchedFields, false, false, setErrors);
  };

  
  // Store form data in localStorage when it changes
  useEffect(() => {
    const dataToStore = { ...formData };
    localStorage.setItem('registrationFormData', JSON.stringify(dataToStore));
  }, [formData]);
  
  // Load form data from localStorage on component mount, ONLY if not editing existing
  useEffect(() => {
    // If we are editing an existing registration, don't load from local storage
    // as the fetchAndPrefill effect handles prefilling from the database.
    if (isEditingExisting) {
      return; // Skip loading from localStorage
    }
    
    const savedFormData = localStorage.getItem('registrationFormData');
    if (savedFormData) {
      try {
        const parsedData = JSON.parse(savedFormData);
        // Convert date string back to Date object if it exists
        if (parsedData.dateOfBirth) {
          parsedData.dateOfBirth = new Date(parsedData.dateOfBirth);
        }
        // Convert waitinglistExpires string back to Date object if it exists
        if (parsedData.waitinglistExpires) {
          parsedData.waitinglistExpires = new Date(parsedData.waitinglistExpires);
        }
        setFormData(parsedData);
      } catch (error) {
        console.error('Error parsing saved form data:', error);
        // Clear potentially corrupted local storage
        localStorage.removeItem('registrationFormData');
      }
    }
  }, [isEditingExisting]); // Add isEditingExisting dependency
 
  // Effect to show appropriate validation errors when changing steps
  useEffect(() => {
    if (validationAttempted && activeStep === 1) {
      // Only show errors for step 2 (race details) if we're on that step
      const errors = validateForm(formData, touchedFields, true, true, undefined);
      const raceDetailsFields = ['raceDistance', 'travelRequired'];
      const stepErrors: Record<string, string> = {};
      raceDetailsFields.forEach(field => {
        if (field in errors) {
          stepErrors[field] = errors[field];
        }
      });
      setErrors(stepErrors);
    } else if (!validationAttempted) {
      // Clear errors if validation hasn't been attempted
      clearAllErrors();
    }
  }, [activeStep, validationAttempted, formData, touchedFields]);

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    // Validate the entire form including terms and conditions
    setValidationAttempted(true);
    const currentErrors = validateForm(formData, touchedFields, true, undefined, undefined);
    
    // Require waiting-list agreement if event full AND user is not already registered
    if (isFull && !isEditingExisting) {
      if (!formData.isOnWaitinglist) {
        setErrors(prev => ({ ...prev, isOnWaitinglist: 'You must agree to join the waiting-list' }));
        setSnackbarMessage('Please agree to join the waiting-list before submitting');
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
        fieldRefs.current.isOnWaitinglist?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        return;
      }
      if (!formData.waitinglistExpires) {
        setErrors(prev => ({ ...prev, waitinglistExpires: 'Select expiration date' }));
        setSnackbarMessage('Please select a waiting-list expiration date');
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
        fieldRefs.current.waitinglistExpires?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        return;
      }
    }
    
    // Only submit if the form is completely valid
    if (isFormValidForSubmission()) {
      // First test the Firestore connection
      const isConnected = await testFirestoreConnection();
      if (!isConnected) {
        setSnackbarMessage('Error connecting to the database. Please check your internet connection.');
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
        return;
      }
      try {
        setIsSubmitting(true);
        // Prepare registration data with trimmed text fields
        const registrationData = {
          firstName: formData.firstName?.trim() || '',
          lastName: formData.lastName?.trim() || '',
          dateOfBirth: formData.dateOfBirth,
          nationality: formData.nationality,
          email: formData.email?.trim() || '',
          phoneCountryCode: formData.phoneCountryCode,
          phoneNumber: formData.phoneNumber?.trim() || '',
          representing: formData.representing?.trim() || '',
          raceDistance: formData.raceDistance,
          travelRequired: formData.travelRequired?.trim() || '',
          termsAccepted: formData.termsAccepted,
          comments: formData.comments?.trim() || '',
          // Include marketing preferences
          notifyFutureEvents: formData.notifyFutureEvents ?? false,
          sendRunningOffers: formData.sendRunningOffers ?? false,
          // Include edition ID
          editionId: formData.editionId || event.id,
          // Waiting list info
          isOnWaitinglist: formData.isOnWaitinglist,
          waitinglistExpires: formData.waitinglistExpires,
          paymentRequired: formData.paymentRequired ?? 300,
          paymentMade: formData.paymentMade ?? 0
        };
        let registrationId = existingRegistrationId;
        if (isEditingExisting && existingRegistrationId) {
          // Update
          const { updateRegistration } = await import('../services/registrationService');
          await updateRegistration(existingRegistrationId, registrationData);
          setSnackbarMessage('Registration updated successfully!');
          setSnackbarSeverity('success');
        } else {
          // Create
          const { createRegistration, getRegistrationsByUserId } = await import('../services/registrationService');
          // Check for existing registration for this user
          const existingRegs = await getRegistrationsByUserId(user?.uid);
          if (existingRegs && existingRegs.length > 0) {
            setSnackbarMessage('You have already submitted a registration. Duplicate entries are not allowed.');
            setSnackbarSeverity('warning');
            setSnackbarOpen(true);
            setIsSubmitting(false);
            return;
          }
          registrationId = await createRegistration(registrationData, user?.uid);
          if (registrationData.isOnWaitinglist) {
            setSnackbarMessage('Successful waiting-list registration!');
          } else {
            setSnackbarMessage('Registration submitted successfully!');
          }
          setSnackbarSeverity('success');
        }
        setSnackbarOpen(true);
        localStorage.removeItem('registrationFormData');
        setTimeout(() => {
          navigate('/', { state: { registrationSuccess: true, registrationId } });
        }, 2000);
      } catch (error) {
        console.error('Error submitting registration:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        setSnackbarMessage(`Error submitting registration: ${errorMessage}`);
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
        setIsSubmitting(false);
        return;
      } finally {
        setIsSubmitting(false);
      }
    } else {
      // Show error message
      setSnackbarMessage('Please accept the terms and conditions before submitting');
      setSnackbarOpen(true);
      // Scroll to terms checkbox
      if (currentErrors.termsAccepted) {
        const ref = fieldRefs.current.termsAccepted;
        if (ref) {
          ref.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
    }
  };

  // Restore getStepContent so it is in scope for rendering
  const getStepContent = (step: number) => {
    console.log('RegistrationPage - current event:', event);
    switch (step) {
      case 0:
        return (
          <PersonalInfoForm 
            formData={formData} 
            onChange={handleFormChange}
            errors={errors}
            fieldRefs={divRefs.current}
            onBlur={handleFieldTouch}
            isEditingExisting={isEditingExisting}
            isFull={isFull}
          />
        );
      case 1:
        return (
          <RaceDetailsForm 
            formData={formData} 
            onChange={handleFormChange}
            errors={errors}
            fieldRefs={divRefs.current}
            onBlur={handleFieldTouch}
            event={event}
          />
        );
      case 2:
        return (
          <ReviewRegistration 
            event={event}
            formData={formData}
            onChange={handleFormChange}
            errors={errors}
            fieldRefs={divRefs.current}
            onBlur={handleFieldTouch}
          />
        );
      default:
        return 'Unknown step';
    }
  };

  if (!isRegistrationOpen) {
    return (
      <Container maxWidth="md">
        <Box sx={{ my: 8, textAlign: 'center' }}>
          <Typography variant="h4" component="h1" gutterBottom>
            Registration Closed
          </Typography>
          <Typography variant="body1" paragraph>
            We're sorry, but registration for KUTC 2025 is now closed.
          </Typography>
          <Button
            variant="contained"
            onClick={() => navigate('/')}
          >
            Return to Home
          </Button>
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="md">
      <RegistrationSnackbar open={snackbarOpen} message={snackbarMessage} severity={snackbarSeverity} onClose={handleSnackbarClose} />
      <Paper 
  elevation={0}
  sx={{
    backgroundColor: 'var(--color-surface)',
    color: 'var(--color-text)',
    border: '1px solid var(--color-surface-border)',
    boxShadow: '0 2px 8px rgba(0,0,0,0.04)',
    borderRadius: 2,
    p: 3,
    mb: 4
  }}
>
            {/* Registration Stepper */}
            <RegistrationStepper 
              steps={steps}
              activeStep={activeStep}
              onStepClick={setActiveStep}
            />
            <Typography variant="h4" component="h1" align="center" gutterBottom>
              {isFull ? 'KUTC 2025 - Sign up for the Waiting-list' : 'Register for KUTC 2025'}
            </Typography>
            {isEditingExisting && (
              <React.Fragment>
                <Alert severity="info" sx={{ mb: 2 }}>
                  You have already registered. You may update your registration below.
                </Alert>
                <Box sx={{ mb: 2 }}>
                  <Alert severity={
                    formData.paymentMade >= formData.paymentRequired ? 'success' :
                    formData.paymentMade < formData.paymentRequired ? 'warning' :
                    'info'
                  }>
                    Status: {formData.paymentMade >= formData.paymentRequired ? 'Payment Made' :
                      formData.paymentMade < formData.paymentRequired ? 'Payment Required' :
                      'Pending'}
                  </Alert>
                </Box>
              </React.Fragment>
            )}
            {getStepContent(activeStep)}
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>
              {activeStep !== 0 && (
                <Button onClick={handleBack} sx={{ mr: 2 }}>
                  Back
                </Button>
              )}
              <Button
                variant="contained"
                color="primary"
                onClick={activeStep === steps.length - 1 ? handleSubmit : handleNext}
                disabled={
                  isSubmitting ||
                  (activeStep === steps.length - 1 && (
                    !isFormValidForSubmission() ||
                    (isFull && !isEditingExisting && (!formData.isOnWaitinglist || !formData.waitinglistExpires))
                  ))
                }
              >
                {activeStep === steps.length - 1 ? 'Submit' : 'Next'}
              </Button>
            </Box>
          </Paper>
          <Grid container justifyContent="center" sx={{ mb: 4 }}>
            <Grid>
        <CircularProgress />
      </Box>
    );
  }

  if (error || !event) {
    return (
      <Container maxWidth="md" sx={{ mt: 4, mb: 4 }}>
        <Alert severity="error">
          {error ? `Error loading event: ${error.message}` : 'No event selected'}
        </Alert>
        <Button variant="contained" onClick={() => navigate('/')} sx={{ mt: 2 }}>
          Back to Home
        </Button>
      </Container>
    );
  }

  return <RegistrationPageInner event={event} />;
};

export default RegistrationPage;
